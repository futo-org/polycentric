// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

export namespace Perf {
export namespace Test {

export class Event {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Event {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEvent(bb:flatbuffers.ByteBuffer, obj?:Event):Event {
  return (obj || new Event()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEvent(bb:flatbuffers.ByteBuffer, obj?:Event):Event {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Event()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

systemId(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

systemIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

systemIdArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

content():string|null
content(optionalEncoding: flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?: any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEvent(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSystemId(builder:flatbuffers.Builder, systemIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, systemIdOffset, 0);
}

static createSystemIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSystemIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(1, timestamp, BigInt('0'));
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static endEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEvent(builder:flatbuffers.Builder, systemIdOffset:flatbuffers.Offset, timestamp:bigint, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  Event.startEvent(builder);
  Event.addSystemId(builder, systemIdOffset);
  Event.addTimestamp(builder, timestamp);
  Event.addContent(builder, contentOffset);
  return Event.endEvent(builder);
}
}

export class SignedEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignedEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignedEvent(bb:flatbuffers.ByteBuffer, obj?:SignedEvent):SignedEvent {
  return (obj || new SignedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignedEvent(bb:flatbuffers.ByteBuffer, obj?:SignedEvent):SignedEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signatureArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

event(obj?:Perf.Test.Event):Perf.Test.Event|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Perf.Test.Event()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSignedEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signatureOffset, 0);
}

static createSignatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, eventOffset, 0);
}

static endSignedEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSignedEventBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSignedEventBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSignedEvent(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset, eventOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignedEvent.startSignedEvent(builder);
  SignedEvent.addSignature(builder, signatureOffset);
  SignedEvent.addEvent(builder, eventOffset);
  return SignedEvent.endSignedEvent(builder);
}
}

}
} 