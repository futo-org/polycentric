services:
    postgres:
        image: postgres:14
        environment:
            POSTGRES_PASSWORD: testing
        ports:
          - "127.0.0.1:5432:5432"
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres -d postgres || exit 1"]
          interval: 5s
          timeout: 5s
          retries: 5
          start_period: 10s
    opensearch-node1:
        image: opensearchproject/opensearch:2.1.0
        ports:
          - "127.0.0.1:9200:9200"
          - "127.0.0.1:9300:9300"
          - "127.0.0.1:9600:9600"
          - "127.0.0.1:9650:9650"
        environment:
            - cluster.name=opensearch-cluster
            - node.name=opensearch-node1
            - bootstrap.memory_lock=true
            - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
            - "DISABLE_INSTALL_DEMO_CONFIG=true"
            - "DISABLE_SECURITY_PLUGIN=true"
            - "discovery.type=single-node"
    opensearch-dashboards:
        image: opensearchproject/opensearch-dashboards:2.1.0
        ports:
            - "127.0.0.1:5601:5601"
        environment:
            - "OPENSEARCH_HOSTS=['http://opensearch-node1:9200']"
            - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    development:
        build:
            context: ./
            dockerfile: Dockerfile
        read_only: true
        working_dir: /app
        environment:
            HOME: "/tmp/home"
            RUST_LOG: "server=debug"
            CARGO_HOME: "/tmp/cargo"
            DATABASE_URL: "postgres://postgres:testing@postgres"
            ADMIN_TOKEN: "123"
            CHALLENGE_KEY: "456"
            CACHE_INTERFACE: "varnish"
            CACHE_BASE_URL: "http://varnish:80"
        user: "${CURRENT_UID}:${CURRENT_GID}"
        volumes:
            - ./:/app
        tmpfs:
            - /tmp:exec
        ports:
            # polycentric server
            - "127.0.0.1:8081:8081"
            # gdbserver
            - "127.0.0.1:3345:3345"
            # polycentric web
            - "127.0.0.1:3000:3000"
            # harbor social
            - "127.0.0.1:3001:3001"
            # wrangler port
            - "127.0.0.1:8976:8976"
        command: tail -F wait_forever
    varnish:
        image: varnish
        volumes:
            - ./varnish/dev.vcl:/etc/varnish/default.vcl:ro
        environment:
            - VARNISH_SIZE=1G
        ports:
            - "127.0.0.1:6081:80"
    caddy:
        image: caddy
        volumes:
            - ./Caddyfile.development:/etc/caddy/Caddyfile:ro
            - /tmp/caddy/data:/data
            - /tmp/caddy/config:/config
            - /tmp/caddy/logs:/var/log/caddy
        ports:
            - "127.0.0.1:8080:8080"
        depends_on:
            - verifiers
            - forum_server
            - varnish
        networks:
            - default
    grafana:
        image: grafana/grafana:9.5.2
        restart: always
        depends_on:
            - influxdb
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        links:
            - influxdb
        ports:
            - "127.0.0.1:8090:3000"
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
            - ./monitoring/provisioning:/etc/grafana/provisioning
    influxdb:
        image: influxdb:2.7-alpine
        restart: always
        environment:
            - DOCKER_INFLUXDB_INIT_MODE=setup
            - DOCKER_INFLUXDB_INIT_USERNAME=admin
            - DOCKER_INFLUXDB_INIT_PASSWORD=adminadminadminadmin
            - DOCKER_INFLUXDB_INIT_ORG=polycentric
            - DOCKER_INFLUXDB_INIT_BUCKET=polycentric
            - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admin
        ports:
            - "127.0.0.1:8086:8086"
        volumes:
            - influxdb_data:/var/lib/influxdb2
    telegraf:
        image: telegraf:1.26.2-alpine
        restart: always
        user: "telegraf:${DOCKER_GID}"
        volumes:
            - ./monitoring/telegraf.conf:/etc/telegraf/telegraf.conf:ro
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - influxdb
        links:
            - influxdb
        ports:
            - "127.0.0.1:8125:8125"
            - "127.0.0.1:8092:8092"
            - "127.0.0.1:8094:8094"
    verifiers:
        build:
            context: .
            dockerfile: packages/verifiers/Dockerfile
        env_file: .env.development
        environment:
            - NODE_ENV=development
        ports:
            - "127.0.0.1:3002:3002"
        volumes:
            - ./packages/verifiers:/usr/src/app/packages/verifiers
            - ./packages/verifiers/state:/usr/src/app/state
            - ./packages/verifiers/certs:/usr/src/app/packages/verifiers/certs
        user: "node"
        depends_on:
            - development
        networks:
            - default
    forum_server:
        build:
            context: .
            dockerfile: forum_server/Dockerfile
            target: builder
        user: "${CURRENT_UID}:${CURRENT_GID}"
        ports:
            - "127.0.0.1:8087:3000"
        environment:
            FORUM_SERVER_NAME: "Polycentric Dev Forum"
            FORUM_SERVER_IMAGE_URL: "/static/images/server-logo.png"
            DATABASE_URL: "postgres://postgres:testing@postgres/forum_db"
            RUST_LOG: "forum_server=debug,actix_web=info,sqlx=warn"
            PORT: "3000"
            ENABLE_FORUM_IMAGE_UPLOADS: false
            IMAGE_UPLOAD_DIR: "/usr/src/forum_server/uploads/images"
            IMAGE_BASE_URL: "/static/images"
            ADMIN_PUBKEYS: "eqtnYandiIQ2ZDRsbOr/SZzwJfzxfllZwyKr8v1ioWc="
        volumes:
            - ./forum_server:/usr/src/forum_server
            - ./polycentric-protocol:/usr/src/polycentric-protocol
            - ./proto:/usr/src/proto
            - forum_server_cargo_cache:/usr/local/cargo
            - forum_server_target:/usr/src/forum_server/target
            - ./forum_server/static:/app/static
        command: >
            sh -c "
                echo 'Attempting to create database (will ignore error if exists)...' && \
                sqlx database create --database-url postgres://postgres:testing@postgres/forum_db || true && \
                echo 'Running migrations...' && \
                sqlx migrate run --database-url postgres://postgres:testing@postgres/forum_db && \
                echo 'Running database seed script...' && \
                cargo run --bin seed && \
                echo 'Starting server with cargo watch...' && \
                cargo watch -w /usr/src/forum_server/src -w /usr/src/polycentric-protocol/src -- cargo run --bin forum_server"
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - default
    dm_server:
        build:
            context: .
            dockerfile: dm_server/Dockerfile
            target: builder
        user: "${CURRENT_UID}:${CURRENT_GID}"
        ports:
            - "127.0.0.1:8088:8080"  # DM HTTP API
            - "127.0.0.1:8089:8081"  # DM WebSocket
        environment:
            DATABASE_URL: "postgres://postgres:testing@postgres:5432/dm_db"
            DM_SERVER_PORT: "8080"
            DM_WEBSOCKET_PORT: "8081"
            DM_CHALLENGE_KEY: "secure-dev-challenge-key-123"
            RUST_LOG: "dm_server=debug,actix_web=info,sqlx=warn"
        volumes:
            - ./dm_server:/usr/src/dm_server
            - ./polycentric-protocol:/usr/src/polycentric-protocol
            - ./proto:/usr/src/proto
            - dm_server_cargo_cache:/usr/local/cargo
            - dm_server_target:/usr/src/dm_server/target
        command: >
            sh -c "
                echo 'Starting DM server with cargo watch...' && \
                cargo watch -w /usr/src/dm_server/src -w /usr/src/polycentric-protocol/src -- cargo run --bin dm-server"
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - default

volumes:
    grafana_data: { }
    influxdb_data: { }
    forum_server_cargo_cache: { }
    forum_server_target: { }
    dm_server_cargo_cache: { }
    dm_server_target: { }

