syntax = "proto3";

package userpackage;

message PublicKey {
    uint64 key_type = 1;
    bytes  key      = 2;
}

message Process {
    bytes process = 1;
}

message Index {
    uint64 index_type    = 1;
    uint64 logical_clock = 2;
}

message Indices {
    repeated Index indices = 1;
}

message VectorClock {
    repeated uint64 logical_clocks = 1;
}

message SignedEvent {
    bytes signature = 1;
    bytes event     = 2;
}

message LWWElementSet {
    enum Operation {
        ADD    = 0;
        REMOVE = 1;
    }
    Operation operation         = 1;
    bytes     value             = 2;
    uint64    unix_milliseconds = 3;
}

message LWWElement {
    bytes  value             = 1;
    uint64 unix_milliseconds = 2;
}

message Server {
    string server = 1;
}

message ImageManifest {
             string  mime       = 1;
             uint64  width      = 2;
             uint64  height     = 3;
             uint64  byte_count = 4;
             Process process    = 5; 
    repeated Range   sections   = 6;
}

message ImageBundle {
    repeated ImageManifest image_manifests = 1;
}

message Event {
             PublicKey     system            = 1;
             Process       process           = 2;
             uint64        logical_clock     = 3;
             uint64        content_type      = 4;
             bytes         content           = 5;
             VectorClock   vector_clock      = 6;
             Indices       indices           = 7;
    optional LWWElementSet lww_element_set   = 8;
    optional LWWElement    lww_element       = 9;
    repeated Reference     references        = 10;
    optional uint64        unix_milliseconds = 11;
}

message SystemProcesses {
    repeated Process processes = 1;
}

message Digest {
    uint64 digest_type = 1;
    bytes  digest      = 2;
}

message Pointer {
    PublicKey system        = 1;
    Process   process       = 2;
    uint64    logical_clock = 3;
    Digest    event_digest  = 4;
}

message Delete {
             Process process           = 1;
             uint64  logical_clock     = 2;
             Indices indices           = 3;
    optional uint64  unix_milliseconds = 4;
             uint64  content_type      = 5;
}

message Events {
    repeated SignedEvent events = 1;
}

message AggregationBucket {
    bytes key = 1;
    int64 value = 2;
}

message PublicKeys {
    repeated PublicKey systems = 1;
}

message Range {
    uint64 low  = 1;
    uint64 high = 2;
}

message RangesForProcess {
             Process process = 1;
    repeated Range   ranges  = 2;
}

message RangesForSystem {
    repeated RangesForProcess ranges_for_processes = 1;
}

message PrivateKey {
    uint64 key_type = 1;
    bytes  key      = 2;
}

message KeyPair {
    uint64 key_type    = 1;
    bytes  private_key = 2;
    bytes  public_key  = 3;
}

message ExportBundle {
    KeyPair key_pair = 1;
    Events  events   = 2;
}

message ResultEventsAndRelatedEventsAndCursor {
    Events                  result_events  = 1;
    Events                  related_events = 2;
    optional bytes          cursor         = 3;
}

message ResultTopStringReferences {
    repeated AggregationBucket buckets = 2;
}

message Reference {
    uint64 reference_type = 1;
    bytes  reference      = 2;
}

message Post {
    reserved 2;
    optional string        content = 1;
    optional ImageManifest image   = 3;
}

message Claim {
             uint64          claim_type   = 1;
    repeated ClaimFieldEntry claim_fields = 2;
}

message ClaimFieldEntry {
    uint64 key   = 1;
    string value = 2;
}

message Vouch {}

message StorageTypeProcessSecret {
    PrivateKey system  = 1;
    Process    process = 2;
}

message StorageTypeProcessState {
             uint64  logical_clock = 1;
    repeated Range   ranges        = 2;
             Indices indices       = 3;
}

message StorageTypeCRDTSetItem {
    uint64                  content_type      = 1;
    bytes                   value             = 2;
    uint64                  unix_milliseconds = 3;
    LWWElementSet.Operation operation         = 4;
}

message StorageTypeCRDTItem {
    uint64 content_type      = 1;
    bytes  value             = 2;
    uint64 unix_milliseconds = 3;
}

message StorageTypeSystemState {
    reserved 1;
    repeated Process                processes      = 2;
    repeated StorageTypeCRDTItem    crdt_items     = 3;
}

message StorageTypeEvent {
    optional SignedEvent event            = 1;
    optional Pointer     mutation_pointer = 2;
}

message RepeatedUInt64 {
    repeated uint64 numbers = 1;
}

// start /query_references API

message QueryReferencesRequest {
             Reference                                       reference                    = 1;
    optional bytes                                           cursor                       = 2;
    optional QueryReferencesRequestEvents                    request_events               = 3;
    repeated QueryReferencesRequestCountLWWElementReferences count_lww_element_references = 4;
    repeated QueryReferencesRequestCountReferences           count_references             = 5;
    repeated bytes                                           extra_byte_references        = 6;
}

message QueryReferencesRequestEvents {
    optional uint64                                          from_type                    = 1;
    repeated QueryReferencesRequestCountLWWElementReferences count_lww_element_references = 2;
    repeated QueryReferencesRequestCountReferences           count_references             = 3;
}

message QueryReferencesRequestCountLWWElementReferences {
             bytes  value     = 1;
    optional uint64 from_type = 2;
}

message QueryReferencesRequestCountReferences {
    optional uint64 from_type = 1;
}

message QueryReferencesResponseEventItem {
             SignedEvent event  = 1;
    repeated uint64      counts = 2;
}

message QueryReferencesResponse {
    repeated QueryReferencesResponseEventItem items          = 1;
    repeated SignedEvent                      related_events = 2;
    optional bytes                            cursor         = 3;
    repeated uint64                           counts         = 4;
}

// end /query_references API

// start /claim_to_system

message QueryClaimToSystemRequest {
    uint64    claim_type      = 1;
    PublicKey trust_root      = 2;

    oneof query {
        string                            match_any_field  = 3;
        QueryClaimToSystemRequestMatchAll match_all_fields = 4;
    }
}

message QueryClaimToSystemRequestMatchAll {
    repeated ClaimFieldEntry fields = 1;
}

message QueryClaimToSystemResponse {
    repeated QueryClaimToSystemResponseMatch matches = 1;
}

message QueryClaimToSystemResponseMatch {
             SignedEvent claim       = 1;
    repeated SignedEvent proof_chain = 2;
}

// end /claim_to_system

// /query_index
message QueryIndexResponse {
    repeated SignedEvent events = 1;
    repeated SignedEvent proof = 2;
}

message URLInfo {
    // url_type 1 = URLInfoSystemLink
    // url_type 2 = URLInfoEventLink
    // url_type 3 = ExportBundle
    // url_type 4 = URLInfoDataLink
    uint64 url_type = 1;
    bytes  body     = 2;
}

message URLInfoSystemLink {
             PublicKey system  = 1;
    repeated string    servers = 2;
}

message URLInfoEventLink {
             PublicKey system        = 1;
             Process   process       = 2;
             uint64    logical_clock = 3;
    repeated string    servers       = 4;
}

message URLInfoDataLink {
             PublicKey system     = 1;
             Process   process    = 2;
    repeated string    servers    = 3;
             uint64    byte_count = 4;
    repeated Range     sections   = 5;
    optional string    mime       = 6;
}

message HarborChallengeResponse {
    // HarborChallengeResponseBody
    bytes body = 1;
    bytes hmac = 2;
}

message HarborChallengeResponseBody {
    bytes  challenge  = 1;
    uint64 created_on = 2;
}

message HarborValidateRequest {
    HarborChallengeResponse challenge     = 1;
    PublicKey               system        = 2;
    bytes                   signature     = 3;
}

message FindClaimAndVouchRequest {
             PublicKey       vouching_system  = 1;
             PublicKey       claiming_system  = 2;
    repeated ClaimFieldEntry fields           = 3;
             uint64          claim_type       = 4;
}

message FindClaimAndVouchResponse {
    SignedEvent vouch = 1;
    SignedEvent claim = 2;
}

message ClaimHandleRequest {
    PublicKey system = 1;
    string  handle       = 2;
}
